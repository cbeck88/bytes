var N=null,E="",T="t",U="u",searchIndex={};
var R=["into_inner","get_ref","Gets a reference to the underlying `Buf`.","get_mut","Gets a mutable reference to the underlying `Buf`.","usize","Gets an unsigned 32 bit integer from `self` in the…","Gets an IEEE754 single-precision (4 bytes) floating point…","Gets an IEEE754 double-precision (8 bytes) floating point…","reader","Transfer bytes into `self` from `src` and advance the…","Writes an IEEE754 single-precision (4 bytes) floating…","Writes an IEEE754 double-precision (8 bytes) floating…","Splits the bytes into two at the given index.","bytesmut","with_capacity","is_empty","is_inline","split_off","split_to","truncate","Shortens the buffer, keeping the first `len` bytes and…","Clears the buffer, removing all data.","extend_from_slice","Appends given bytes to this object.","Returns an iterator over the bytes contained by the buffer.","Read bytes from a buffer.","remaining","Returns the number of bytes between the current position…","Returns a slice starting at the current position and of…","bytes_vectored","bytes::buf","Fills `dst` with potentially multiple slices starting at…","Advance the internal cursor of the Buf","has_remaining","Returns true if there are any more bytes to consume","copy_to_slice","Copies bytes from `self` into `dst`.","Gets an unsigned 8 bit integer from `self`.","Gets a signed 8 bit integer from `self`.","Gets an unsigned 16 bit integer from `self` in big-endian…","get_u16_le","Gets an unsigned 16 bit integer from `self` in…","Gets a signed 16 bit integer from `self` in big-endian…","get_i16_le","Gets a signed 16 bit integer from `self` in little-endian…","get_u32_le","Gets a signed 32 bit integer from `self` in big-endian…","get_i32_le","Gets a signed 32 bit integer from `self` in little-endian…","Gets an unsigned 64 bit integer from `self` in big-endian…","get_u64_le","Gets an unsigned 64 bit integer from `self` in…","Gets a signed 64 bit integer from `self` in big-endian…","get_i64_le","Gets a signed 64 bit integer from `self` in little-endian…","get_u128","Gets an unsigned 128 bit integer from `self` in big-endian…","get_u128_le","Gets an unsigned 128 bit integer from `self` in…","get_i128","Gets a signed 128 bit integer from `self` in big-endian…","get_i128_le","Gets a signed 128 bit integer from `self` in little-endian…","get_uint","Gets an unsigned n-byte integer from `self` in big-endian…","get_uint_le","Gets an unsigned n-byte integer from `self` in…","Gets a signed n-byte integer from `self` in big-endian…","get_int_le","Gets a signed n-byte integer from `self` in little-endian…","get_f32_le","get_f64_le","Transforms a `Buf` into a concrete buffer.","Creates an adaptor which will read at most `limit` bytes…","Creates an adaptor which will chain this buffer with…","Creates a \"by reference\" adaptor for this instance of `Buf`.","Creates an adaptor which implements the `Read` trait for…","A trait for values that provide sequential write access to…","remaining_mut","Returns the number of bytes that can be written from the…","advance_mut","Advance the internal cursor of the BufMut","has_remaining_mut","Returns true if there is space in `self` for more bytes.","bytes_mut","Returns a mutable slice starting at the current BufMut…","bytes_vectored_mut","Fills `dst` with potentially multiple mutable slices…","put_slice","Writes an unsigned 8 bit integer to `self`.","Writes a signed 8 bit integer to `self`.","Writes an unsigned 16 bit integer to `self` in big-endian…","put_u16_le","Writes an unsigned 16 bit integer to `self` in…","Writes a signed 16 bit integer to `self` in big-endian…","put_i16_le","Writes a signed 16 bit integer to `self` in little-endian…","Writes an unsigned 32 bit integer to `self` in big-endian…","put_u32_le","Writes an unsigned 32 bit integer to `self` in…","Writes a signed 32 bit integer to `self` in big-endian…","put_i32_le","Writes a signed 32 bit integer to `self` in little-endian…","Writes an unsigned 64 bit integer to `self` in the…","put_u64_le","Writes an unsigned 64 bit integer to `self` in…","Writes a signed 64 bit integer to `self` in the big-endian…","put_i64_le","Writes a signed 64 bit integer to `self` in little-endian…","Writes an unsigned 128 bit integer to `self` in the…","put_u128_le","Writes an unsigned 128 bit integer to `self` in…","Writes a signed 128 bit integer to `self` in the…","put_i128_le","Writes a signed 128 bit integer to `self` in little-endian…","Writes an unsigned n-byte integer to `self` in big-endian…","put_uint_le","Writes an unsigned n-byte integer to `self` in the…","Writes a signed n-byte integer to `self` in big-endian…","put_int_le","Writes a signed n-byte integer to `self` in little-endian…","put_f32_le","put_f64_le","Creates a \"by reference\" adaptor for this instance of…","Creates an adaptor which implements the `Write` trait for…","Conversion into a `Buf`","The `Buf` type that `self` is being converted into","Creates a `Buf` from a value.","into_iter","clone_into","borrow_mut","try_from","try_into","type_id","advance","from_buf","ordering","partial_cmp","formatter","from_iter","intoiterator","put_u128","put_i128","put_uint"];

searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","i":[[3,"Bytes","bytes","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut",E,"A unique reference to a contiguous slice of memory.",N,N],[0,"buf",E,"Utilities for working with buffers.",N,N],[3,"Chain",R[31],"A `Chain` sequences two buffers.",N,N],[3,"IntoIter",E,"Iterator over the bytes contained by the buffer.",N,N],[3,"Reader",E,"A `Buf` adapter which implements `io::Read` for the inner…",N,N],[3,"Take",E,"A `Buf` adapter which limits the bytes read from an…",N,N],[3,"Writer",E,"A `BufMut` adapter which implements `io::Write` for the…",N,N],[11,"new",E,"Creates a new `Chain` sequencing the provided values.",0,[[[U],[T]],["chain"]]],[11,"first_ref",E,"Gets a reference to the first underlying `Buf`.",0,[[["self"]],[T]]],[11,"first_mut",E,"Gets a mutable reference to the first underlying `Buf`.",0,[[["self"]],[T]]],[11,"last_ref",E,"Gets a reference to the last underlying `Buf`.",0,[[["self"]],[U]]],[11,"last_mut",E,"Gets a mutable reference to the last underlying `Buf`.",0,[[["self"]],[U]]],[11,R[0],E,"Consumes this `Chain`, returning the underlying values.",0,[[]]],[11,"new",E,"Creates an iterator over the bytes contained by the buffer.",1,[[[T]],["intoiter"]]],[11,R[0],E,"Consumes this `IntoIter`, returning the underlying value.",1,[[],[T]]],[11,R[1],E,R[2],1,[[["self"]],[T]]],[11,R[3],E,R[4],1,[[["self"]],[T]]],[11,R[1],E,R[2],2,[[["self"]],["b"]]],[11,R[3],E,R[4],2,[[["self"]],["b"]]],[11,R[0],E,"Consumes this `Reader`, returning the underlying value.",2,[[],["b"]]],[11,R[0],E,"Consumes this `Take`, returning the underlying value.",3,[[],[T]]],[11,R[1],E,R[2],3,[[["self"]],[T]]],[11,R[3],E,R[4],3,[[["self"]],[T]]],[11,"limit",E,"Returns the maximum number of bytes that can be read.",3,[[["self"]],[R[5]]]],[11,"set_limit",E,"Sets the maximum number of bytes that can be read.",3,[[["self"],[R[5]]]]],[11,R[1],E,"Gets a reference to the underlying `BufMut`.",4,[[["self"]],["b"]]],[11,R[3],E,"Gets a mutable reference to the underlying `BufMut`.",4,[[["self"]],["b"]]],[11,R[0],E,"Consumes this `Writer`, returning the underlying value.",4,[[],["b"]]],[8,"Buf",E,R[26],N,N],[10,R[27],E,R[28],5,[[["self"]],[R[5]]]],[10,"bytes",E,R[29],5,[[["self"]]]],[11,R[30],E,R[32],5,[[["self"]],[R[5]]]],[10,R[135],E,R[33],5,[[["self"],[R[5]]]]],[11,R[34],E,R[35],5,[[["self"]],["bool"]]],[11,R[36],E,R[37],5,[[["self"]]]],[11,"get_u8",E,R[38],5,[[["self"]],["u8"]]],[11,"get_i8",E,R[39],5,[[["self"]],["i8"]]],[11,"get_u16",E,R[40],5,[[["self"]],["u16"]]],[11,R[41],E,R[42],5,[[["self"]],["u16"]]],[11,"get_i16",E,R[43],5,[[["self"]],["i16"]]],[11,R[44],E,R[45],5,[[["self"]],["i16"]]],[11,"get_u32",E,R[6],5,[[["self"]],["u32"]]],[11,R[46],E,R[6],5,[[["self"]],["u32"]]],[11,"get_i32",E,R[47],5,[[["self"]],["i32"]]],[11,R[48],E,R[49],5,[[["self"]],["i32"]]],[11,"get_u64",E,R[50],5,[[["self"]],["u64"]]],[11,R[51],E,R[52],5,[[["self"]],["u64"]]],[11,"get_i64",E,R[53],5,[[["self"]],["i64"]]],[11,R[54],E,R[55],5,[[["self"]],["i64"]]],[11,R[56],E,R[57],5,[[["self"]],["u128"]]],[11,R[58],E,R[59],5,[[["self"]],["u128"]]],[11,R[60],E,R[61],5,[[["self"]],["i128"]]],[11,R[62],E,R[63],5,[[["self"]],["i128"]]],[11,R[64],E,R[65],5,[[["self"],[R[5]]],["u64"]]],[11,R[66],E,R[67],5,[[["self"],[R[5]]],["u64"]]],[11,"get_int",E,R[68],5,[[["self"],[R[5]]],["i64"]]],[11,R[69],E,R[70],5,[[["self"],[R[5]]],["i64"]]],[11,"get_f32",E,R[7],5,[[["self"]],["f32"]]],[11,R[71],E,R[7],5,[[["self"]],["f32"]]],[11,"get_f64",E,R[8],5,[[["self"]],["f64"]]],[11,R[72],E,R[8],5,[[["self"]],["f64"]]],[11,"collect",E,R[73],5,[[],["b"]]],[11,"take",E,R[74],5,[[[R[5]]],["take"]]],[11,"chain",E,R[75],5,[[[U]],["chain"]]],[11,"by_ref",E,R[76],5,[[["self"]],["self"]]],[11,R[9],E,R[77],5,[[],[R[9]]]],[8,"BufMut",E,R[78],N,N],[10,R[79],E,R[80],6,[[["self"]],[R[5]]]],[10,R[81],E,R[82],6,[[["self"],[R[5]]]]],[11,R[83],E,R[84],6,[[["self"]],["bool"]]],[10,R[85],E,R[86],6,[[["self"]]]],[11,R[87],E,R[88],6,[[["self"]],[R[5]]]],[11,"put",E,R[10],6,[[["self"],["intobuf"]]]],[11,R[89],E,R[10],6,[[["self"]]]],[11,"put_u8",E,R[90],6,[[["self"],["u8"]]]],[11,"put_i8",E,R[91],6,[[["self"],["i8"]]]],[11,"put_u16",E,R[92],6,[[["self"],["u16"]]]],[11,R[93],E,R[94],6,[[["self"],["u16"]]]],[11,"put_i16",E,R[95],6,[[["self"],["i16"]]]],[11,R[96],E,R[97],6,[[["self"],["i16"]]]],[11,"put_u32",E,R[98],6,[[["self"],["u32"]]]],[11,R[99],E,R[100],6,[[["self"],["u32"]]]],[11,"put_i32",E,R[101],6,[[["self"],["i32"]]]],[11,R[102],E,R[103],6,[[["self"],["i32"]]]],[11,"put_u64",E,R[104],6,[[["self"],["u64"]]]],[11,R[105],E,R[106],6,[[["self"],["u64"]]]],[11,"put_i64",E,R[107],6,[[["self"],["i64"]]]],[11,R[108],E,R[109],6,[[["self"],["i64"]]]],[11,R[142],E,R[110],6,[[["self"],["u128"]]]],[11,R[111],E,R[112],6,[[["self"],["u128"]]]],[11,R[143],E,R[113],6,[[["self"],["i128"]]]],[11,R[114],E,R[115],6,[[["self"],["i128"]]]],[11,R[144],E,R[116],6,[[["self"],["u64"],[R[5]]]]],[11,R[117],E,R[118],6,[[["self"],["u64"],[R[5]]]]],[11,"put_int",E,R[119],6,[[["self"],["i64"],[R[5]]]]],[11,R[120],E,R[121],6,[[["self"],["i64"],[R[5]]]]],[11,"put_f32",E,R[11],6,[[["self"],["f32"]]]],[11,R[122],E,R[11],6,[[["self"],["f32"]]]],[11,"put_f64",E,R[12],6,[[["self"],["f64"]]]],[11,R[123],E,R[12],6,[[["self"],["f64"]]]],[11,"by_ref",E,R[124],6,[[["self"]],["self"]]],[11,"writer",E,R[125],6,[[],["writer"]]],[8,"FromBuf",E,"Conversion from a [`Buf`]",N,N],[10,R[136],E,"Creates a value from a buffer.",7,[[[T]],["self"]]],[8,"IntoBuf",E,R[126],N,N],[16,"Buf",E,R[127],8,N],[10,"into_buf",E,R[128],8,[[]]],[11,R[15],"bytes","Creates a new `Bytes` with the specified capacity.",9,[[[R[5]]],["bytes"]]],[11,"new",E,"Creates a new empty `Bytes`.",9,[[],["bytes"]]],[11,"from_static",E,"Creates a new `Bytes` from a static slice.",9,[[],["bytes"]]],[11,"len",E,"Returns the number of bytes contained in this `Bytes`.",9,[[["self"]],[R[5]]]],[11,R[16],E,"Returns true if the `Bytes` has a length of 0.",9,[[["self"]],["bool"]]],[11,R[17],E,"Return true if the `Bytes` uses inline allocation",9,[[["self"]],["bool"]]],[11,"slice",E,"Returns a slice of self for the provided range.",9,[[["self"]],["bytes"]]],[11,"slice_ref",E,"Returns a slice of self that is equivalent to the given…",9,[[["self"]],["bytes"]]],[11,R[18],E,R[13],9,[[["self"],[R[5]]],["bytes"]]],[11,R[19],E,R[13],9,[[["self"],[R[5]]],["bytes"]]],[11,R[20],E,R[21],9,[[["self"],[R[5]]]]],[11,"clear",E,R[22],9,[[["self"]]]],[11,"try_mut",E,"Attempts to convert into a `BytesMut` handle.",9,[[],[["result",[R[14],"bytes"]],[R[14]],["bytes"]]]],[11,"to_mut",E,"Acquires a mutable reference to the owned form of the data.",9,[[["self"]],[R[14]]]],[11,R[23],E,R[24],9,[[["self"]]]],[11,"unsplit",E,"Combine splitted Bytes objects back as contiguous.",9,[[["self"],["bytes"]]]],[11,"iter",E,R[25],9,[[["self"]],[["iter",["u8"]],["u8"]]]],[11,R[15],E,"Creates a new `BytesMut` with the specified capacity.",10,[[[R[5]]],[R[14]]]],[11,"new",E,"Creates a new `BytesMut` with default capacity.",10,[[],[R[14]]]],[11,"len",E,"Returns the number of bytes contained in this `BytesMut`.",10,[[["self"]],[R[5]]]],[11,R[16],E,"Returns true if the `BytesMut` has a length of 0.",10,[[["self"]],["bool"]]],[11,R[17],E,"Return true if the `BytesMut` uses inline allocation",10,[[["self"]],["bool"]]],[11,"capacity",E,"Returns the number of bytes the `BytesMut` can hold…",10,[[["self"]],[R[5]]]],[11,"freeze",E,"Converts `self` into an immutable `Bytes`.",10,[[],["bytes"]]],[11,R[18],E,R[13],10,[[["self"],[R[5]]],[R[14]]]],[11,"split",E,"Removes the bytes from the current view, returning them in…",10,[[["self"]],[R[14]]]],[11,R[19],E,"Splits the buffer into two at the given index.",10,[[["self"],[R[5]]],[R[14]]]],[11,R[20],E,R[21],10,[[["self"],[R[5]]]]],[11,"clear",E,R[22],10,[[["self"]]]],[11,"resize",E,"Resizes the buffer so that `len` is equal to `new_len`.",10,[[["self"],[R[5]],["u8"]]]],[11,"set_len",E,"Sets the length of the buffer.",10,[[["self"],[R[5]]]]],[11,"reserve",E,"Reserves capacity for at least `additional` more bytes to…",10,[[["self"],[R[5]]]]],[11,R[23],E,R[24],10,[[["self"]]]],[11,"unsplit",E,"Combine splitted BytesMut objects back as contiguous.",10,[[["self"],[R[14]]]]],[11,"iter",E,R[25],10,[[["self"]],[["iter",["u8"]],["u8"]]]],[8,"Buf",E,R[26],N,N],[10,R[27],E,R[28],5,[[["self"]],[R[5]]]],[10,"bytes",E,R[29],5,[[["self"]]]],[11,R[30],R[31],R[32],5,[[["self"]],[R[5]]]],[10,R[135],"bytes",R[33],5,[[["self"],[R[5]]]]],[11,R[34],R[31],R[35],5,[[["self"]],["bool"]]],[11,R[36],E,R[37],5,[[["self"]]]],[11,"get_u8",E,R[38],5,[[["self"]],["u8"]]],[11,"get_i8",E,R[39],5,[[["self"]],["i8"]]],[11,"get_u16",E,R[40],5,[[["self"]],["u16"]]],[11,R[41],E,R[42],5,[[["self"]],["u16"]]],[11,"get_i16",E,R[43],5,[[["self"]],["i16"]]],[11,R[44],E,R[45],5,[[["self"]],["i16"]]],[11,"get_u32",E,R[6],5,[[["self"]],["u32"]]],[11,R[46],E,R[6],5,[[["self"]],["u32"]]],[11,"get_i32",E,R[47],5,[[["self"]],["i32"]]],[11,R[48],E,R[49],5,[[["self"]],["i32"]]],[11,"get_u64",E,R[50],5,[[["self"]],["u64"]]],[11,R[51],E,R[52],5,[[["self"]],["u64"]]],[11,"get_i64",E,R[53],5,[[["self"]],["i64"]]],[11,R[54],E,R[55],5,[[["self"]],["i64"]]],[11,R[56],E,R[57],5,[[["self"]],["u128"]]],[11,R[58],E,R[59],5,[[["self"]],["u128"]]],[11,R[60],E,R[61],5,[[["self"]],["i128"]]],[11,R[62],E,R[63],5,[[["self"]],["i128"]]],[11,R[64],E,R[65],5,[[["self"],[R[5]]],["u64"]]],[11,R[66],E,R[67],5,[[["self"],[R[5]]],["u64"]]],[11,"get_int",E,R[68],5,[[["self"],[R[5]]],["i64"]]],[11,R[69],E,R[70],5,[[["self"],[R[5]]],["i64"]]],[11,"get_f32",E,R[7],5,[[["self"]],["f32"]]],[11,R[71],E,R[7],5,[[["self"]],["f32"]]],[11,"get_f64",E,R[8],5,[[["self"]],["f64"]]],[11,R[72],E,R[8],5,[[["self"]],["f64"]]],[11,"collect",E,R[73],5,[[],["b"]]],[11,"take",E,R[74],5,[[[R[5]]],["take"]]],[11,"chain",E,R[75],5,[[[U]],["chain"]]],[11,"by_ref",E,R[76],5,[[["self"]],["self"]]],[11,R[9],E,R[77],5,[[],[R[9]]]],[8,"BufMut","bytes",R[78],N,N],[10,R[79],E,R[80],6,[[["self"]],[R[5]]]],[10,R[81],E,R[82],6,[[["self"],[R[5]]]]],[11,R[83],R[31],R[84],6,[[["self"]],["bool"]]],[10,R[85],"bytes",R[86],6,[[["self"]]]],[11,R[87],R[31],R[88],6,[[["self"]],[R[5]]]],[11,"put",E,R[10],6,[[["self"],["intobuf"]]]],[11,R[89],E,R[10],6,[[["self"]]]],[11,"put_u8",E,R[90],6,[[["self"],["u8"]]]],[11,"put_i8",E,R[91],6,[[["self"],["i8"]]]],[11,"put_u16",E,R[92],6,[[["self"],["u16"]]]],[11,R[93],E,R[94],6,[[["self"],["u16"]]]],[11,"put_i16",E,R[95],6,[[["self"],["i16"]]]],[11,R[96],E,R[97],6,[[["self"],["i16"]]]],[11,"put_u32",E,R[98],6,[[["self"],["u32"]]]],[11,R[99],E,R[100],6,[[["self"],["u32"]]]],[11,"put_i32",E,R[101],6,[[["self"],["i32"]]]],[11,R[102],E,R[103],6,[[["self"],["i32"]]]],[11,"put_u64",E,R[104],6,[[["self"],["u64"]]]],[11,R[105],E,R[106],6,[[["self"],["u64"]]]],[11,"put_i64",E,R[107],6,[[["self"],["i64"]]]],[11,R[108],E,R[109],6,[[["self"],["i64"]]]],[11,R[142],E,R[110],6,[[["self"],["u128"]]]],[11,R[111],E,R[112],6,[[["self"],["u128"]]]],[11,R[143],E,R[113],6,[[["self"],["i128"]]]],[11,R[114],E,R[115],6,[[["self"],["i128"]]]],[11,R[144],E,R[116],6,[[["self"],["u64"],[R[5]]]]],[11,R[117],E,R[118],6,[[["self"],["u64"],[R[5]]]]],[11,"put_int",E,R[119],6,[[["self"],["i64"],[R[5]]]]],[11,R[120],E,R[121],6,[[["self"],["i64"],[R[5]]]]],[11,"put_f32",E,R[11],6,[[["self"],["f32"]]]],[11,R[122],E,R[11],6,[[["self"],["f32"]]]],[11,"put_f64",E,R[12],6,[[["self"],["f64"]]]],[11,R[123],E,R[12],6,[[["self"],["f64"]]]],[11,"by_ref",E,R[124],6,[[["self"]],["self"]]],[11,"writer",E,R[125],6,[[],["writer"]]],[8,"IntoBuf","bytes",R[126],N,N],[16,"Buf",E,R[127],8,N],[10,"into_buf",E,R[128],8,[[]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[129],E,E,9,[[],["i"]]],[11,"to_owned",E,E,9,[[["self"]],[T]]],[11,R[130],E,E,9,[[[T],["self"]]]],[11,R[132],E,E,9,[[[U]],["result"]]],[11,R[133],E,E,9,[[],["result"]]],[11,R[131],E,E,9,[[["self"]],[T]]],[11,"borrow",E,E,9,[[["self"]],[T]]],[11,R[134],E,E,9,[[["self"]],["typeid"]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[129],E,E,10,[[],["i"]]],[11,"to_owned",E,E,10,[[["self"]],[T]]],[11,R[130],E,E,10,[[[T],["self"]]]],[11,R[132],E,E,10,[[[U]],["result"]]],[11,R[133],E,E,10,[[],["result"]]],[11,R[131],E,E,10,[[["self"]],[T]]],[11,"borrow",E,E,10,[[["self"]],[T]]],[11,R[134],E,E,10,[[["self"]],["typeid"]]],[11,"from",R[31],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[129],E,E,0,[[],["i"]]],[11,R[132],E,E,0,[[[U]],["result"]]],[11,R[133],E,E,0,[[],["result"]]],[11,R[131],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[134],E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[129],E,E,1,[[],["i"]]],[11,R[132],E,E,1,[[[U]],["result"]]],[11,R[133],E,E,1,[[],["result"]]],[11,R[131],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[134],E,E,1,[[["self"]],["typeid"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[132],E,E,2,[[[U]],["result"]]],[11,R[133],E,E,2,[[],["result"]]],[11,R[131],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[134],E,E,2,[[["self"]],["typeid"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[132],E,E,3,[[[U]],["result"]]],[11,R[133],E,E,3,[[],["result"]]],[11,R[131],E,E,3,[[["self"]],[T]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[134],E,E,3,[[["self"]],["typeid"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[132],E,E,4,[[[U]],["result"]]],[11,R[133],E,E,4,[[],["result"]]],[11,R[131],E,E,4,[[["self"]],[T]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[134],E,E,4,[[["self"]],["typeid"]]],[11,R[27],E,E,0,[[["self"]],[R[5]]]],[11,"bytes",E,E,0,[[["self"]]]],[11,R[135],E,E,0,[[["self"],[R[5]]]]],[11,R[30],E,E,0,[[["self"]],[R[5]]]],[11,R[27],E,E,3,[[["self"]],[R[5]]]],[11,"bytes",E,E,3,[[["self"]]]],[11,R[135],E,E,3,[[["self"],[R[5]]]]],[11,R[27],"bytes",E,9,[[["self"]],[R[5]]]],[11,"bytes",E,E,9,[[["self"]]]],[11,R[135],E,E,9,[[["self"],[R[5]]]]],[11,R[27],E,E,10,[[["self"]],[R[5]]]],[11,"bytes",E,E,10,[[["self"]]]],[11,R[135],E,E,10,[[["self"],[R[5]]]]],[11,R[79],R[31],E,0,[[["self"]],[R[5]]]],[11,R[85],E,E,0,[[["self"]]]],[11,R[81],E,E,0,[[["self"],[R[5]]]]],[11,R[87],E,E,0,[[["self"]],[R[5]]]],[11,R[79],"bytes",E,10,[[["self"]],[R[5]]]],[11,R[81],E,E,10,[[["self"],[R[5]]]]],[11,R[85],E,E,10,[[["self"]]]],[11,R[89],E,E,10,[[["self"]]]],[11,"put_u8",E,E,10,[[["self"],["u8"]]]],[11,"put_i8",E,E,10,[[["self"],["i8"]]]],[11,R[136],E,E,9,[[[T]],["self"]]],[11,R[136],E,E,10,[[[T]],["self"]]],[11,"extend",E,E,9,[[["self"],[T]]]],[11,"extend",E,E,9,[[["self"],[T]]]],[11,"extend",E,E,10,[[["self"],[T]]]],[11,"extend",E,E,10,[[["self"],[T]]]],[11,"default",E,E,9,[[],["bytes"]]],[11,"default",E,E,10,[[],[R[14]]]],[11,"next",R[31],E,1,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint",E,E,1,[[["self"]]]],[11,"clone","bytes",E,9,[[["self"]],["bytes"]]],[11,"clone",E,E,10,[[["self"]],[R[14]]]],[11,"cmp",E,E,9,[[["bytes"],["self"]],[R[137]]]],[11,"cmp",E,E,10,[[["self"],[R[14]]],[R[137]]]],[11,"from",E,E,9,[[[R[14]]],["bytes"]]],[11,"from",E,"Convert a `Vec` into a `Bytes`",9,[[["vec",["u8"]],["u8"]],["bytes"]]],[11,"from",E,E,9,[[["string"]],["bytes"]]],[11,"from",E,E,9,[[],["bytes"]]],[11,"from",E,E,9,[[["str"]],["bytes"]]],[11,"from",E,"Convert a `Vec` into a `BytesMut`",10,[[["vec",["u8"]],["u8"]],[R[14]]]],[11,"from",E,E,10,[[["string"]],[R[14]]]],[11,"from",E,E,10,[[],[R[14]]]],[11,"from",E,E,10,[[["str"]],[R[14]]]],[11,"from",E,E,10,[[["bytes"]],[R[14]]]],[11,R[129],R[31],E,0,[[]]],[11,R[129],"bytes",E,9,[[]]],[11,R[129],E,E,10,[[]]],[11,R[138],E,E,9,[[["bytes"],["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,10,[[["self"],[R[14]]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,10,[[["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,10,[[["self"],["str"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,10,[[["vec"],["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,10,[[["string"],["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,10,[[["self"],[T]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,9,[[["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,9,[[["self"],["str"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,9,[[["vec"],["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,9,[[["string"],["self"]],[["option",[R[137]]],[R[137]]]]],[11,R[138],E,E,9,[[["self"],[T]],[["option",[R[137]]],[R[137]]]]],[11,"as_mut",E,E,10,[[["self"]]]],[11,"eq",E,E,9,[[["bytes"],["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[14]]],["bool"]]],[11,"eq",E,E,10,[[["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,10,[[["vec"],["self"]],["bool"]]],[11,"eq",E,E,10,[[["string"],["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"],[T]],["bool"]]],[11,"eq",E,E,9,[[["self"]],["bool"]]],[11,"eq",E,E,9,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,9,[[["vec"],["self"]],["bool"]]],[11,"eq",E,E,9,[[["string"],["self"]],["bool"]]],[11,"eq",E,E,9,[[["self"],[T]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[14]]],["bool"]]],[11,"eq",E,E,10,[[["bytes"],["self"]],["bool"]]],[11,"as_ref",E,E,9,[[["self"]]]],[11,"as_ref",E,E,10,[[["self"]]]],[11,"deref_mut",E,E,10,[[["self"]]]],[11,"fmt",R[31],E,0,[[["self"],[R[139]]],["result"]]],[11,"fmt",E,E,1,[[["self"],[R[139]]],["result"]]],[11,"fmt",E,E,2,[[["self"],[R[139]]],["result"]]],[11,"fmt",E,E,3,[[["self"],[R[139]]],["result"]]],[11,"fmt",E,E,4,[[["self"],[R[139]]],["result"]]],[11,"fmt","bytes",E,9,[[["self"],[R[139]]],["result"]]],[11,"fmt",E,E,10,[[["self"],[R[139]]],["result"]]],[11,"write_str",E,E,10,[[["self"],["str"]],["result"]]],[11,"write_fmt",E,E,10,[[["self"],["arguments"]],["result"]]],[11,"deref",E,E,9,[[["self"]]]],[11,"deref",E,E,10,[[["self"]]]],[11,"hash",E,E,9,[[["self"],["h"]]]],[11,"hash",E,E,10,[[["self"],["h"]]]],[11,R[140],E,E,10,[[[R[141]]],["self"]]],[11,R[140],E,E,9,[[[R[141]]],["self"]]],[11,R[140],E,E,10,[[[R[141]]],["self"]]],[11,R[140],E,E,9,[[[R[141]]],["self"]]],[11,R[131],E,E,10,[[["self"]]]],[11,"borrow",E,E,9,[[["self"]]]],[11,"borrow",E,E,10,[[["self"]]]],[11,"write",R[31],E,4,[[["self"]],[[R[5]],["result",[R[5]]]]]],[11,"flush",E,E,4,[[["self"]],["result"]]],[11,"fill_buf",E,E,2,[[["self"]],["result"]]],[11,"consume",E,E,2,[[["self"],[R[5]]]]],[11,"read",E,E,2,[[["self"]],[[R[5]],["result",[R[5]]]]]],[11,R[30],E,R[32],5,[[["self"]],[R[5]]]],[11,R[34],E,R[35],5,[[["self"]],["bool"]]],[11,R[36],E,R[37],5,[[["self"]]]],[11,"get_u8",E,R[38],5,[[["self"]],["u8"]]],[11,"get_i8",E,R[39],5,[[["self"]],["i8"]]],[11,"get_u16",E,R[40],5,[[["self"]],["u16"]]],[11,R[41],E,R[42],5,[[["self"]],["u16"]]],[11,"get_i16",E,R[43],5,[[["self"]],["i16"]]],[11,R[44],E,R[45],5,[[["self"]],["i16"]]],[11,"get_u32",E,R[6],5,[[["self"]],["u32"]]],[11,R[46],E,R[6],5,[[["self"]],["u32"]]],[11,"get_i32",E,R[47],5,[[["self"]],["i32"]]],[11,R[48],E,R[49],5,[[["self"]],["i32"]]],[11,"get_u64",E,R[50],5,[[["self"]],["u64"]]],[11,R[51],E,R[52],5,[[["self"]],["u64"]]],[11,"get_i64",E,R[53],5,[[["self"]],["i64"]]],[11,R[54],E,R[55],5,[[["self"]],["i64"]]],[11,R[56],E,R[57],5,[[["self"]],["u128"]]],[11,R[58],E,R[59],5,[[["self"]],["u128"]]],[11,R[60],E,R[61],5,[[["self"]],["i128"]]],[11,R[62],E,R[63],5,[[["self"]],["i128"]]],[11,R[64],E,R[65],5,[[["self"],[R[5]]],["u64"]]],[11,R[66],E,R[67],5,[[["self"],[R[5]]],["u64"]]],[11,"get_int",E,R[68],5,[[["self"],[R[5]]],["i64"]]],[11,R[69],E,R[70],5,[[["self"],[R[5]]],["i64"]]],[11,"get_f32",E,R[7],5,[[["self"]],["f32"]]],[11,R[71],E,R[7],5,[[["self"]],["f32"]]],[11,"get_f64",E,R[8],5,[[["self"]],["f64"]]],[11,R[72],E,R[8],5,[[["self"]],["f64"]]],[11,"collect",E,R[73],5,[[],["b"]]],[11,"take",E,R[74],5,[[[R[5]]],["take"]]],[11,"chain",E,R[75],5,[[[U]],["chain"]]],[11,"by_ref",E,R[76],5,[[["self"]],["self"]]],[11,R[9],E,R[77],5,[[],[R[9]]]],[11,R[83],E,R[84],6,[[["self"]],["bool"]]],[11,R[87],E,R[88],6,[[["self"]],[R[5]]]],[11,"put",E,R[10],6,[[["self"],["intobuf"]]]],[11,R[89],E,R[10],6,[[["self"]]]],[11,"put_u8",E,R[90],6,[[["self"],["u8"]]]],[11,"put_i8",E,R[91],6,[[["self"],["i8"]]]],[11,"put_u16",E,R[92],6,[[["self"],["u16"]]]],[11,R[93],E,R[94],6,[[["self"],["u16"]]]],[11,"put_i16",E,R[95],6,[[["self"],["i16"]]]],[11,R[96],E,R[97],6,[[["self"],["i16"]]]],[11,"put_u32",E,R[98],6,[[["self"],["u32"]]]],[11,R[99],E,R[100],6,[[["self"],["u32"]]]],[11,"put_i32",E,R[101],6,[[["self"],["i32"]]]],[11,R[102],E,R[103],6,[[["self"],["i32"]]]],[11,"put_u64",E,R[104],6,[[["self"],["u64"]]]],[11,R[105],E,R[106],6,[[["self"],["u64"]]]],[11,"put_i64",E,R[107],6,[[["self"],["i64"]]]],[11,R[108],E,R[109],6,[[["self"],["i64"]]]],[11,R[142],E,R[110],6,[[["self"],["u128"]]]],[11,R[111],E,R[112],6,[[["self"],["u128"]]]],[11,R[143],E,R[113],6,[[["self"],["i128"]]]],[11,R[114],E,R[115],6,[[["self"],["i128"]]]],[11,R[144],E,R[116],6,[[["self"],["u64"],[R[5]]]]],[11,R[117],E,R[118],6,[[["self"],["u64"],[R[5]]]]],[11,"put_int",E,R[119],6,[[["self"],["i64"],[R[5]]]]],[11,R[120],E,R[121],6,[[["self"],["i64"],[R[5]]]]],[11,"put_f32",E,R[11],6,[[["self"],["f32"]]]],[11,R[122],E,R[11],6,[[["self"],["f32"]]]],[11,"put_f64",E,R[12],6,[[["self"],["f64"]]]],[11,R[123],E,R[12],6,[[["self"],["f64"]]]],[11,"by_ref",E,R[124],6,[[["self"]],["self"]]],[11,"writer",E,R[125],6,[[],["writer"]]]],"p":[[3,"Chain"],[3,"IntoIter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[3,"Bytes"],[3,"BytesMut"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);